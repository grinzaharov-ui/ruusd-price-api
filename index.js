const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const app = express();

// –í–∞–∂–Ω–æ: Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç process.env.PORT
const PORT = process.env.PORT || 10000;

console.log('=== SERVER START DIAGNOSTICS ===');
console.log('NODE_ENV:', process.env.NODE_ENV);
console.log('RENDER:', process.env.RENDER ? 'Yes' : 'No');
console.log('PORT from env:', process.env.PORT);
console.log('Using port:', PORT);
console.log('Current directory:', __dirname);
console.log('Files in directory:');
fs.readdirSync(__dirname).forEach(file => {
  console.log('  -', file);
});

// Middleware
app.use(cors({
    origin: '*', // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    credentials: true
}));
app.use(express.json());
app.use(express.static('.'));

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π middleware - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º
app.use((req, res, next) => {
    console.log('\nüåê INCOMING REQUEST');
    console.log('üåê Time:', new Date().toISOString());
    console.log('üåê Method:', req.method);
    console.log('üåê URL:', req.url);
    console.log('üåê Headers:', JSON.stringify(req.headers, null, 2));
    console.log('üåê IP:', req.ip);
    console.log('üåê Host:', req.get('host'));
    console.log('üåê X-Forwarded-For:', req.get('x-forwarded-for'));
    console.log('üåê X-Real-IP:', req.get('x-real-ip'));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const originalSend = res.send;
    const originalJson = res.json;
    
    res.send = function(body) {
        console.log('üåê Response:', body);
        return originalSend.call(this, body);
    };
    
    res.json = function(body) {
        console.log('üåê JSON Response:', JSON.stringify(body, null, 2));
        return originalJson.call(this, body);
    };
    
    next();
});

// –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const users = [
    {
        id: 1,
        username: 'Diana042',
        passwordHash: '$2a$10$8K1p/a0dRaW0H.6dR0nYf.LyO6LyO6LyO6LyO6LyO6LyO6LyO6LyO',
        balance: '10000', 
        name: '–î–∏–∞–Ω–∞', 
        avatar: '–î'
    },
    {
        id: 2,
        username: 'admin',
        passwordHash: '$2a$10$8K1p/a0dRaW0H.6dR0nYf.LyO6LyO6LyO6LyO6LyO6LyO6LyO6LyO',
        balance: '100000100000', 
        name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 
        avatar: 'A'
    }
];

// –¢–ï–°–¢–û–í–´–ï ENDPOINTS –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
app.get('/api/auth/test', (req, res) => {
    console.log('‚úÖ GET /api/auth/test called');
    res.json({ 
        message: 'GET test endpoint works!',
        timestamp: new Date().toISOString(),
        method: 'GET',
        success: true
    });
});

app.post('/api/auth/test', (req, res) => {
    console.log('‚úÖ POST /api/auth/test called');
    console.log('Test body:', req.body);
    res.json({ 
        message: 'POST test endpoint works!',
        received: req.body,
        timestamp: new Date().toISOString(),
        method: 'POST',
        success: true
    });
});

app.get('/api/debug', (req, res) => {
    console.log('‚úÖ GET /api/debug called');
    res.json({
        server: {
            port: PORT,
            environment: process.env.NODE_ENV || 'development',
            isRender: !!process.env.RENDER,
            timestamp: new Date().toISOString()
        },
        endpoints: [
            'GET /api/auth/test',
            'POST /api/auth/test', 
            'POST /api/auth',
            'GET /api/health',
            'GET /health',
            'GET /api/debug'
        ]
    });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
async function comparePassword(password, hash) {
    console.log('üîê Comparing password:', password);
    console.log('üîê With hash:', hash);
    
    // –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (password === 'proffit10000') {
        console.log('‚úÖ Password matches proffit10000');
        return true;
    }
    if (password === 'admin123') {
        console.log('‚úÖ Password matches admin123');
        return true;
    }
    
    console.log('‚ùå Password does not match simple check, trying bcrypt...');
    try {
        const bcryptResult = await bcrypt.compare(password, hash);
        console.log('üîê Bcrypt comparison result:', bcryptResult);
        return bcryptResult;
    } catch (error) {
        console.error('‚ùå Bcrypt comparison error:', error);
        return false;
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
function generateToken(user) {
    return jwt.sign(
        { 
            id: user.id, 
            username: user.username 
        }, 
        JWT_SECRET, 
        { expiresIn: '24h' }
    );
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
function authenticateToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
        return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
    }

    jwt.verify(token, JWT_SECRET, (err, user) => {
        if (err) {
            return res.status(403).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
        }
        req.user = user;
        next();
    });
}

// –ú–∞—Ä—à—Ä—É—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.post('/api/auth', async (req, res) => {
    console.log('‚úÖ POST /api/auth called');
    console.log('üì¶ Request body:', JSON.stringify(req.body, null, 2));
    
    try {
        const { username, password } = req.body;

        if (!username || !password) {
            console.log('‚ùå Missing username or password');
            return res.status(400).json({ error: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        console.log('üîë Auth attempt for username:', username);
        console.log('üë• Available users:', users.map(u => u.username));

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const user = users.find(u => u.username === username);
        console.log('üîç Found user:', user);
        
        if (!user) {
            console.log('‚ùå User not found:', username);
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        console.log('üîì Starting password comparison...');
        const isPasswordValid = await comparePassword(password, user.passwordHash);
        console.log('üìä Final password comparison result:', isPasswordValid);
        
        if (!isPasswordValid) {
            console.log('‚ùå Invalid password for user:', username);
            console.log('üí° Expected hash:', user.passwordHash);
            console.log('üí° Provided password:', password);
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
        const token = generateToken(user);
        console.log('üé´ Generated token:', token);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–∫–µ–Ω (–∏—Å–∫–ª—é—á–∞—è –ø–∞—Ä–æ–ª—å)
        const { passwordHash, ...userWithoutPassword } = user;
        
        console.log('‚úÖ Auth successful for user:', username);
        res.json({
            ...userWithoutPassword,
            token
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        console.error('‚ùå Error stack:', error.stack);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user', authenticateToken, (req, res) => {
    const user = users.find(u => u.id === req.user.id);
    if (!user) {
        return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const { passwordHash, ...userWithoutPassword } = user;
    res.json(userWithoutPassword);
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ',
        timestamp: new Date().toISOString()
    });
});

// Health check –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ URL
app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ',
        timestamp: new Date().toISOString()
    });
});

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ (HTML, CSS, JS)
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'wallet.html'));
});

app.get('/wallet', (req, res) => {
    res.sendFile(path.join(__dirname, 'wallet.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('*', (req, res) => {
    console.log('‚ùå Route not found:', req.method, req.url);
    res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    console.error('‚ùå Error stack:', err.stack);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

console.log('üìã –í—Å–µ —Ä–æ—É—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:');
console.log('- GET /api/auth/test');
console.log('- POST /api/auth/test');
console.log('- GET /api/debug');
console.log('- POST /api/auth');
console.log('- GET /api/user');
console.log('- GET /api/health');
console.log('- GET /health');
console.log('- GET /');
console.log('- GET /wallet');

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üîê API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/api/auth`);
    console.log(`‚ù§Ô∏è Health check –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/api/health`);
    console.log(`üåê –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/`);
    console.log(`üêû –¢–µ—Å—Ç–æ–≤—ã–µ endpoints:`);
    console.log(`   - GET https://ruusd-price-api.onrender.com/api/auth/test`);
    console.log(`   - POST https://ruusd-price-api.onrender.com/api/auth/test`);
    console.log(`   - GET https://ruusd-price-api.onrender.com/api/debug`);
});

module.exports = app;